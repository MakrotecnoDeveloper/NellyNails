@model List<Factura>
@{
    ViewData["Title"] = "Visualizar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .icono-enlace {
        display: inline-block;
        vertical-align: middle; /* Centrar verticalmente */
        margin-right: 10px; /* Agregar espacio entre iconos */
        font-size: 20px; /* Tamaño de fuente del icono */
    }

    .box-header {
max-width: 100%;
    }
</style>
<div class="content-wrapper">
    <section class="content">
        <div class="row">
            <div class="col-xs-12">
                <div class="box">
                    <div class="box-header col-xs-12 text-center">
                        <h3 class="box-title">Listado de Facturas</h3>
                    </div>
                    <div class="box-body">
                        <!-- Formulario de búsqueda -->
                        <div class="col-xs-12">
                            <form id="formBuscarFactura">
                                <div class="form-group">
                                    <label for="inputBuscarFactura">Buscar Factura:</label>
                                    <input type="text" class="form-control" id="inputBuscarFactura" placeholder="Número de factura">
                                </div>
                                <button type="submit" class="btn btn-primary">Buscar</button>
                                <button type="button" id="btnLimpiarBusqueda" class="btn btn-default">Limpiar</button>
                            </form>
                        </div>

                        <!-- Tabla de facturas -->
                        <table class="table" id="tablaFacturas">
                            <thead>
                                <tr>
                                    <th>Código Fact</th>
                                    <th>Cedula Cliente</th>
                                    <th>Cedula Empleado</th>
                                    <th>Fecha Venta</th>
                                    <th>Estado</th>
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody id="tablaFacturasBody">
                                <!-- Aquí se cargarán las filas de las facturas -->
                            </tbody>
                        </table>

                        <!-- Controles de paginación -->
                        <div id="paginacion">
                            <!-- Aquí se cargarán los controles de paginación -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<div id="paginacion-container" class="text-center" style="margin-bottom:10px;">
    <button onclick="cambiarPagina(-1)" id="botonAnterior">Anterior</button>
    <span id="pagina-actual" class="text-white">Página 1</span>
    <button onclick="cambiarPagina(1)" id="botonSiguiente">Siguiente</button>
</div>

<script>
    var paginaActual = 1;
    var perfilesPorPagina = 10; // Puedes ajustar esto según tus necesidades
    var totalPerfiles = @Model.Count(); // Obtén el total de perfiles desde el modelo

    function cambiarPagina(direccion) {
        paginaActual += direccion;
        mostrarPerfiles();
    }

    function mostrarPerfiles() {
        var perfiles = @Html.Raw(Json.Serialize(Model));
        var inicio = (paginaActual - 1) * perfilesPorPagina;
        var fin = inicio + perfilesPorPagina;
        var perfilesPagina = perfiles.slice(inicio, fin);
        actualizarTabla(perfilesPagina);
        actualizarPaginacion();
    }

    function actualizarTabla(perfiles) {
        var resultados = document.getElementById('tablaFacturasBody');
        resultados.innerHTML = '';

        perfiles.forEach(perfil => {
            var fila = document.createElement('tr');
            fila.className = 'perfil-fila';

            // Crear celdas para cada propiedad del perfil
            var propiedades = ['cod_factura', 'cedula_cliente', 'cedula', 'fechaVenta', 'estado'];
            propiedades.forEach(propiedad => {
                var celda = document.createElement('td');
                celda.textContent = perfil[propiedad];
                fila.appendChild(celda);
            });

            // Verificar si el estado es "Completado" o "Proceso"
            if (perfil.estado === "Proceso") {
                // Enlace 1 - Editar Producto
                var enlace1 = crearEnlace(`/Pedido/CrearPedido?id=${perfil.cod_factura}`, 'fas fa-pencil-alt');

                // Agregar enlaces a una celda
                var acciones = document.createElement('td');
                acciones.appendChild(enlace1);
                fila.appendChild(acciones);
            } else {
                // Agregar mensaje "No se puede editar"
                var mensaje = document.createElement('td');
                mensaje.textContent = "No se puede editar";
                fila.appendChild(mensaje);
            }

            // Agregar la fila a la tabla
            resultados.appendChild(fila);
        });
    }

    function crearEnlace(href, iconoClass) {
        var enlace = document.createElement('a');
        enlace.href = href;
        var icono = document.createElement('i');

        icono.classList.add('icono-enlace');

        // Separar las clases y agregarlas individualmente
        var clases = iconoClass.split(' ');
        clases.forEach(clase => {
            icono.classList.add(clase);
        });

        enlace.appendChild(icono);
        enlace.onclick = function () {
            window.location.href = this.href;
            return false; // Prevenir el comportamiento predeterminado del enlace
        };
        return enlace;
    }
    //fin funciones

    function actualizarPaginacion() {
        var paginaActualElement = document.getElementById('pagina-actual');
        paginaActualElement.textContent = `Página ${paginaActual}`;

        var botonAnterior = document.getElementById('botonAnterior');
        var botonSiguiente = document.getElementById('botonSiguiente');

        botonAnterior.disabled = paginaActual <= 1;
        botonSiguiente.disabled = (paginaActual * perfilesPorPagina) >= totalPerfiles;
    }

    mostrarPerfiles();

    // Manejar la búsqueda de factura
    $('#formBuscarFactura').submit(function (e) {
        e.preventDefault();
        var numeroFactura = $('#inputBuscarFactura').val();
        if (numeroFactura.trim() != '') {
            buscarFactura(numeroFactura);
        }
    });

    // Controlador de eventos para limpiar la búsqueda
    $('#btnLimpiarBusqueda').click(function () {
        // Limpiar el valor del campo de búsqueda
        $('#inputBuscarFactura').val('');

        // Limpiar el contenido del tbody
        $('#tablaFacturasBody').empty();
    });

    // Función para buscar una factura por número
    function buscarFactura(numeroFactura) {
        $.ajax({
            url: '@Url.Action("BuscarFactura", "Pedido")',
            type: 'GET',
            data: { numeroFactura: numeroFactura },
            success: function (response) {
                $('#tablaFacturasBody').html(response);
                $('#paginacion').empty();
            },
            error: function () {
                console.error('Error al buscar la factura.');
            }
        });
    }
    
</script>